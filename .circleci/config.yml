version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1 
commands:
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=1
            echo "$SUCCESS"
            if [[ "${SUCCESS}" == "1" ]];
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

  destroy-environment:
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}            
  
  

  install_awscli:
      description: Install AWS CLI v2
      steps:
        - run:
            name: Install AWS CLI v2
            command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

                  
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test
                
  scan-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
         name: scan frontend dependencies
         command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout      
      - run:      
          name: Install tar and gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
          
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
  
  configure-infrastructure:
      docker:
        - image: python:3.11-rc-alpine
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: 
              - "34:76:32:a8:ec:99:e9:34:3f:f4:e2:f0:55:a4:50:48"
        - attach_workspace:
            at: ~/
        - run:
            name: Install tar and gzip
            command: |
              apk add --no-cache tar gzip
        - run:
            name: Install ansible
            command: |
              apk add --update ansible
        - run:
            name: Install aws cli
            command: |
              pip install awscli
        - run:
            name: Run Playbook and Configure server
            command: |
              cd .circleci/ansible
              cat inventory.txt
              ansible-playbook -i inventory.txt configure-server.yml
  
  run-migrations:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - install_awscli
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Run migrations
            command: |
              cd backend
              npm install
              npm run migrations > migrations_dump.txt
              cat migrations_dump.txt
        - run:
            name: Send migration status to kvdb.io
            command: |
              cat ~/project/backend/migrations_dump.txt
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                echo "insecure" >> ~/.curlrc
                echo "insecure"
                curl https://kvdb.io/GjRuSz7etqxEz49MvTpbWF/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                echo "https://kvdb.io/GjRuSz7etqxEz49MvTpbWF/migration_${CIRCLE_WORKFLOW_ID:0:7}"        
              fi
        - revert-migrations               
        - destroy-environment


  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout     
      - run:
          name: Install dependencies
          command: |
            apk update && apk upgrade --no-cache
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            pip install awscli
            apk add --update nodejs
            apk add --update npm
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["34:76:32:a8:ec:99:e9:34:3f:f4:e2:f0:55:a4:50:48"]
      - attach_workspace:
          at: ~/
          paths:
            - project/backend/.env
      - run:
          name: Install dependencies
          command: |
            apk update && apk upgrade --no-cache
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            pip install awscli
            apk add --update nodejs
            apk add --update npm

      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is ---------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.8-alpine3.15 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update && apk upgrade --no-cache
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            pip install awscli
            apk add curl
            apk add --update nodejs
            apk add --update npm

      - attach_workspace:
          at: ~/
 
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030"            
            if curl ${API_URL}/api/status | grep "ok"
            then
              return 1
            else
              return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-us-east-1.amazonaws.com" 
            echo $URL
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update && apk upgrade --no-cache
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            pip install awscli
            apk add curl
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople 
            echo OldWorkflowID: "${OldWorkflowID}"
            echo New WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment
      - revert-migrations

 # cleanup:
  #    docker:
    #    - image: amazon/aws-cli
    #  steps:
    #   - checkout
       # - run:
        #    name: Get old stack workflow id & Remove old stack and files
          #  command: |
          #    export OldWorkflowID=$(aws cloudformation \
           #         list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
           #         --no-paginate --output text)
            #  echo OldWorkflowID: "${OldWorkflowID}"
             # echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              ## Fetch the stack names         
           #   export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            #        --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
             #   echo Stack names: "${STACKS[@]}"
             # for OldWorkflowID in "${STACKS[@]}"; do
             #   if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ $OldWorkflowID ]]
               # then
               #   echo ------ Cleaning up old jobs ------
                 # aws s3 rm "s3://udapeople-${oldWorkFlowID}" --recursive
                 # aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkFlowID}"
                 # aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkFlowID}"
               # else
                 # echo ------ Nothing to cleanup - "Current: $OldWorkflowID" ------
               # fi
             # done


            
workflows:
  default:
    jobs:
       - build-frontend
       - build-backend
       - test-frontend:
          requires: [build-frontend]
       - test-backend:
          requires: [build-backend]
       - scan-backend:
          requires: [build-backend]
       - scan-frontend:
          requires: [build-frontend]
       - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master] 
       - configure-infrastructure:
          requires: [deploy-infrastructure]
       - run-migrations:
          requires: [configure-infrastructure]
       - deploy-frontend:
          requires: [run-migrations]
       - deploy-backend:
          requires: [run-migrations]
       - smoke-test:
          requires: [deploy-frontend, deploy-backend] 
       - cloudfront-update:
          requires: [smoke-test]  
      # - cleanup:
       #   requires: [cloudfront-update]          
