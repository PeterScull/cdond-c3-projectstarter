version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1 
      
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test
                
  scan-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
         name: scan frontend dependencies
         command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFUALT_REGION
      - run:
          name: install tar and gzip
          command: |
            yum -y install tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
          
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
      docker:
        - image: python:3.8-alpine3.15
      steps:
        - checkout
        - add_ssh_key:
            fingerprints: ["be:30:ed:29:55:16:89:ff:4d:9c:d3:b7:82:2a:49:b8"]
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: | 
              apk add --update tar gzip ansible
              pip install awscli

        - run:
            name: Configure server
            command: |
              export ANSIBLE_HOST_KEY_CHECKING=False
              export RECORD_HOST_KEYS=FALSE
              export ANSIBLE_PARAMIKO_BANNER_TIMEOUT=30
              echo ENVIROMENT=production > "backend/.env"
              echo TYPEORM_CONNECTION=postgres>> "backend/.env"
              echo TYPEORM_MIGRATION_DIR=./src/modules/domain/**/*.entity.ts > "backend/.env"
              echo TYPEORM_PORT=$TYPEORM_PORT>> "backend/.env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
              echo TYPEORM_PORT=$TYPEORM_PASSWORD>> "backend/.env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
              echo TYPEORM_HOST=$TYPEORM_HOST>> "backend/.env"
              echo TYPEORM_MIGRATION=$TYPEORM_MIGRATION >> "backend/.env"
              echo "CONTENT OF backend./env"
              cat backend/.env
              cd .circle/ansible
              anisible-playbook -i inventory.txt configure-server.yml
    
        - persist_to_workspace:
            root: ~/
            paths:
              - projects/backend
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: awscli install
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations:revert
            if [ $? -eq 0 ]; then echo "install success"; fi
            echo "MIGRATIONS STARTED" > migrations_dump.txt
            npm run migrations >> migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "successfully"  ~/project/backend/migrations_dump.txt
            then
              echo "success"
            else echo "fail"
            fi
            cd backend
            if grep "has been executed successfully" migrations_dump.txt
            then
              curl -k https://kvdb.io/2wKc5aL4zJjVve6Y6qjabv/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            else curl -k https://kvdb.io/2wKc5aL4zJjVve6Y6qjabv/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '2'
            fi
            
workflows:
  default:
    jobs:
       - build-frontend
       - build-backend
       - test-frontend:
          requires: [build-frontend]
       - test-backend:
          requires: [build-backend]
       - scan-backend:
          requires: [build-backend]
       - scan-frontend:
          requires: [build-frontend]
       - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]