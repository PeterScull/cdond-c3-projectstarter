version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_ID:
          type: string
          default: $(CIRCLE_WORKFLOW_ID:0:7)   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi         
jobs:
  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test
                
  scan-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
         name: scan frontend dependencies
         command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      
      - run:
          name: install tar and gzip
          command: |
            yum -y install tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \ 
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --paramater-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople        
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \ 
              --tags project=udapeople    
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --paramater-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
                  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instance \
              --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'reservations[*].Instance[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt 
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_key:
          fingerprints: ["SHA256:pxHYCnVbJbzlLtHcMXKE78eLWexThWPYR6naVkJWH+k"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          # adds backend dependencies
          command: |
            aws cloudformation deploy \
            -- template-file .circleci/files/backend.yml \
            -- stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            -- parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            -- tags project=udapeople
            
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople

      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            export RECORD_HOST_KEYS=FALSE
            export ANSIBLE_PARAMIKO_BANNER_TIMEOUT=30
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres>> "backend/.env"        
            echo TYPEORM_MIGRATION_DIR=./src/modules/domain/**/*.entity.ts > "backend/.env"        
            echo TYPEORM_PORT=$TYPEORM_PORT>> "backend/.env"        
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PASSWORD>> "backend/.env"	        
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST>> "backend/.env"
            echo TYPEORM_MIGRATION=$TYPEORM_MIGRATION >> "backend/.env"
            echo "CONTENT OF backend./env"
            cat backend/.env
            cd .circle/ansible
            anisible-playbook -i inventory.txt configure-server.yml

      - restore_cache:
          keys: [backend-build]




workflows:
  default:
    jobs:
       - build-frontend
       - build-backend
       - test-frontend:
          requires: [build-frontend]
       - test-backend:
          requires: [build-backend]
       - scan-backend:
          requires: [build-backend]
       - scan-frontend:
          requires: [build-frontend]
       - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
       - configure-infrastructure:
          requires: [deploy-infrastructure]