version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1         
jobs:
  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test
                
  scan-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
         name: scan frontend dependencies
         command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical -- true

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_CLI_ACCESS_KEY_ID
          aws-secret-access-key: AWS_CLI_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      
      - run:
          name: install tar and gzip
          command: |
            yum -y install tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \ 
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --paramater-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople        
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \ 
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --paramater-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople        
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instance \
              --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'reservations[*].Instance[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt 
    
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    branches:
      only:
        - master
        - /rc-,*/
    steps:
      - checkout
      -   run yum -t install trar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \ 
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --paramater-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople        
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \ 
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --paramater-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople        
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instance \
              --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'reservations[*].Instance[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
          event: on_fail      

workflows:
  default:
    jobs:
       - build-frontend
       - build-backend
       - test-frontend:
          requires: [build-frontend]
       - test-backend:
          requires: [build-backend]
       - scan-backend:
          requires: [build-backend]
       - scan-frontend:
          requires: [build-frontend]
       - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]