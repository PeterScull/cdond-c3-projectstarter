version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_ID:
          type: string
          default: $(CIRCLE_WORKFLOW_ID:0:7)   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi         
jobs:
  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test
                
  scan-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
         name: scan frontend dependencies
         command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      
      - run:
          name: install tar and gzip
          command: |
            yum -y install tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \ 
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --paramater-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople        
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \ 
              --tags project=udapeople    
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --paramater-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
                  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instance \
              --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'reservations[*].Instance[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt 
  
  configure-infrastructure:
    docker:
      - image: python:3.8-alpine3.15
    steps:
      - checkout
      - add_ssh_key:
          fingerprints: ["be:58:91:7d:ae:df:7a:2a:9b:50:7f:81:94:cb:60:9c:f8:06:85:c6"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
           apk add --update tar gzip ansible
           pip install awscli

      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            export RECORD_HOST_KEYS=False
            export ANSIBLE_PARAMIKO_BANNER_TIMEOUT=30
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"        
            echo TYPEORM_MIGRATION_DIR=./src/modules/domain/**/*.entity.ts > "backend/.env"        
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"        
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PASSWORD >> "backend/.env"	        
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST>> "backend/.env"
            echo TYPEORM_MIGRATION=$TYPEORM_MIGRATION >> "backend/.env"
            echo "CONTENT OF backend./env"
            cat backend/.env
            cd .circle/ansible
            anisible-playbook -i inventory.txt configure-server.yml
      - restore_cache:
          keys: [backend-build]
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
    
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
            keys: [backend-build]
      - run:
          name: install awscli
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
      - run: 
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migration:revert
            if [$? -eq 0]; then echo "install success"; fi
            echo "MIGRATION BEGUN" > migrations_dump.txt
            npm run migrations >> migrations_dump.txt
            cat migrations_dump.txt
        
      - run:
          name: sending to kvdb.io
          command: |   
            if grep -q "success" ~/project/backend/migrations_dump.txt
            then
             echo "success"
            else echo "fail"
            fi
            cd backend
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi  

  deploy-frontend:
    docker:
     - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL htttps://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:UdacityProject, Values=udapeople" --query 'Resurvations[*].instance[*].PublicIpAddress --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${BACKEND_IP}
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
           cd frontend
           npm install
           npm run build
           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 
                    
  deploy-backend:
    docker:
      - image: python:3.8-alpine3.15
    steps:
      - add_ssh_keys:
          fingerprints: ["be:58:91:7d:ae:df:7a:2a:9b:50:7f:81:94:cb:60:9c:f8:06:85:c6"]
      - attach_workspace:
          at: ~/
          paths:
            -projects/backend/.env
      - run:
          name: Install dependencies
          command: |
            apk add --ipdate ansible curle nodejs npm
            pip install awscli
      - run:
          name: Deploy backend
          command: |
           cd backend
           npm i
           npm runbuild
           cp package* ./dist
           cd ..
           tar -C naclemd -czvf artifact.tar.gz .
           cd .circleci/ansible
           echo "Contents  of the inventory.txt file is -------"
           cat inventory.txt
           ansible-playbook -i inventory.txt deploy-backend.yml
  
  smoke-test:
    docker:
      - image: python:3.8-alpine3.15 
    steps:
      - attach_workspace:
          at: ~/
          paths:
            - project/frontend/.env
      - run:
          name: Install dependencies
          command: |
             apk add --ipdate ansible curle nodejs npm
             pip install awscli
      - run:
          name: Get backend url
          command: |
              export BACKEND_IP=$(aws --regions us-west-1 ec2 describe-instance --filters "Name=tag:project,Values=udapeople" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
              curl -s "${API_URL}/api/status"

      - run:
          name: Backend smoke test.
          command: |
              export BACKEND_IP=$(aws --regions us-west-1 ec2 describe-instance --filters "Name=tag:project,Values=udapeople" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
              curl -s "${API_URL}/api/status"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                return 0
              else
                return 1
              fi
 
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y curl
            yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldworkflowID=$(aws cloudformation list-exports -- query "exports[?name__|'WorkflowID"\'] --region us-west1 --no paginate --output text')
            echo $(OldworkflowID) >> ~/OldworkflowID.txt
            cat ~/OldworkflowID.txt
      - persist_to_workspace:
          root: ~/
          paths:
          - OldworkflowID.txt
      
      - run:
          name: Deploy distrubtion
          command : |
           aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
           echo OldworkflowID: "${OldworkflowID}"
           echo New WorkflowID: {CIRCLE_WORKFLOW_ID:0:7}
  



  cleanup:
      docker:
       - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              yum install -y curl
              yum install -y tar gzip
        - attach_workspace:
            at: ~/
        - run:
            name: Remove old stack and files      
            command: |
              export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"   
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack Names: "${STACKS[@]}"
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
              then
                echo "CLEAN UP STARTED-----------------------"
                  aws --region us-west-1 s3 rm "s3://idapeople${oldWorkflow}" --recursive
                  aws --region us-west-1 cloudformation delete-stack --stack-name "udapeople-backend-$[OldworkflowID:0:7]"
                  aws --region us-west-1 cloudformation delete-stack --stack-name "udapeople-frontend-$[OldworkflowID:0:7]"
              else
                echo "$oldWorkflowID==$currentWorkflowID -> all good"
  
              fi




workflows:
  default:
    jobs:
       - build-frontend
       - build-backend
       - test-frontend:
          requires: [build-frontend]
       - test-backend:
          requires: [build-backend]
       - scan-backend:
          requires: [build-backend]
       - scan-frontend:
          requires: [build-frontend]
       - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
       - configure-infrastructure:
          requires: [deploy-infrastructure]
       - run-migrations:
          requires: [configure-infrastructure]   
       - deploy-frontend:
          requires: [run-migrations]
       - deploy-backend:
          requires: [run-migrations]
       - smoke-test:
          requires: [deploy-backend, deploy-frontend]
       - cloudfront-update:
          requires: [smoke-test]
       - cleanup:
          requires: [cloudfront_update]
